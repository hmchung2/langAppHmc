# 4.1 
- set up
 npx create-react-native-app langApp --use-npm
 
 npx react-native run-android
 npm start
 
 npm install --save styled-components
 npm install --save-dev babel-plugin-styled-components @types/styled-components @types/styled-components-react-native

# 4.2
- animation by nature
-- you can pass function into set function 
setting plus 5 to the y everytime
setY((prev) => prev + 5)


# 4.3
- rules of animation
-- Anything you want to animate, do not put it in the state.
-- But use it in Animated.Value
const Y = new Animated.Value(0);

--Never directly set value such as Y = 20

-- Only Animatable components can be Animated
-- Make it animatable compnent
--- 2 methods
1. const Box = styled(Animated.createAnimatedComponent(TouchableOpacity))`
2. const AnimatedBox = Animated.createAnimatedComponent(Box)   ---> Just wrap this around the component

#4.4
- First Anmation
-- timing
:    Animated.timing(Y, {
      toValue: 200,
      useNativeDriver : true  // <---- this is always true
    }).start();

-- touchableOpacity is not good for animation
--- make it into view first then wrap it with touchableopacity

-- it does not rerender everytime so to log it use "addListener"
:Y.addListener(() => console.log(Y));

-- spring
--- gives us more physics such as bouncing
:    Animated.spring(Y, {
      toValue: -200,
      useNativeDriver: true,
      bounciness: 35,
    }).start();


#4.5
- Animation and state

-- start function at the end allows callback function

-- when callback function is called, 
then if it is changing the state, then it happens rerender
So all those codes run again.

-- useRef --> persists a value even after rerender happens
:const Y = useRef(new Animated.Value(0)).current;

-- easing from timing is useful
:    Animated.timing(Y, {
      toValue: up ? -100 : 100,
      useNativeDriver: true,
      easing: Easing.cubic,
    }).start(toggleUp);


#4.6
- Interpolation
-- change value from other changing value
--- need same number of range of input and output list
:  const opacityValue = Y_POSITION.interpolate({
    inputRange: [-300, 0, 300],
    outputRange: [1, 0, 1],
  });


#4.7
- Interpolation 2

-- you can use string  such as degree

-- you cannot animate background color if you use native useNativeDriver
--- you must put nativedirver = false to animate color

-- Animated.valueXY --> use two values
:  const bottomRight = Animated.timing(POSITION, {
    toValue: {
      x: SCREEN_WIDTH / 2 - 100,
      y: SCREEN_HEIGHT / 2 - 100,
    },
    useNativeDriver: false,
  });


:  const POSITION = useRef(new Animated.ValueXY({x:0 , y : 300})).current;

:   const roation = POSITION.y.interpolate({
    inputRange: [-300, 300],
    outputRange: ["-360deg", "360deg"],
  });

# 4.8
- value xy
--- list of translateX and translateY can be shotend by "getTranslateTransform"
            transform: [
              { rotateY: roation },
              ...POSITION.getTranslateTransform(),
            ],

-- "Animated.sequence" array of animation
:Animated.sequence([topLeft, bottomLeft, bottomRight, topRgiht]).start();
+
: const topRgiht = Animated.timing(POSITION, { ...

-- Animated.loop => just loost animation
:     Animated.loop(
      Animated.sequence([topLeft, bottomLeft, bottomRight, topRgiht]).start()
    );
#4.9
- Pan Responder (dragging)
-- we can just put it in as attribute , because they are list of json
: <AnimatedBox
          {...panResponder.panHandlers}

-- "onStartShouldSetPanResponder" : setting this return true => we want human interaction for the view

-- onPanResponderMove -> tracks position of finger
:    const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onPanResponderMove: (_, { dx, dy }) => {
        POSITION.setValue({
          x: dx,
          y: dy,
        });
      },
    })
  ).current;


# 4.10
- Pan Responder 2
-- "onPanResponderRelease" : when we release
:   const panResponder = useRef(
    PanResponder.create({
      onStartShouldSetPanResponder: () => true,
      onPanResponderMove: (_, { dx, dy }) => {
        POSITION.setValue({
          x: dx,
          y: dy,
        });
      },
      onPanResponderRelease: () => {
        Animated.timing(POSITION, {
          toValue: {
            x: 0,
            y: 0,
          },
          useNativeDriver: false,
          duration: 1000,
        }).start();
      },
    })
  ).current;

-- onPanResponderGrant : when the value set to at the start of the touch
:      onPanResponderGrant: () => {
        POSITION.setOffset({
          x: POSITION.x_value,
          y: POSITION.y_value,
        });
      },
--- POSITION.x is just animated value but not exact number so you need to put "_value"

--- however, more touch will lead to add too many offsets so we need to put "flattenOffset()" in release to empty the offsets
 :      onPanResponderRelease: () => {
        POSITION.flattenOffset();
      },

-- "Animated.parallel([])" : run animation functions in parallel in sequence


# 4.12-16
-Card Project
-- It goes out of range in interpolation by dragging to far

-- to set up boundary use "extrapolate"
--- options -> "extend" , "identity" , "clamp" 

:  const rotation = position.interpolate({
    inputRange: [-100, 100],
    outputRange: ["-15deg", "15deg"],
    extrapolate: "clamp",
  });

-- dismiss object when dragged to far

:onPanResponderRelease: (_, { dx }) => {
        if (dx < -150) {
          console.log("dismiss to the left");
          Animated.spring(position, {
            toValue: -400,
            useNativeDriver: true,
          }).start();
        } else if (dx > 150) {
          console.log("dismis to the right");
          Animated.spring(position, {
            toValue: 400,
            useNativeDriver: true,
          }).start();
        } else {
          Animated.parallel([onPressOut, goCenter]).start();
        }

-- spring takes long time to finish
--- use restSpeedThreshold

# 4.17-4.19
- Drag Drop Project

-- parallel happens at the same time while sequence one after another


-- interpolate input has to be from small value to big value. The other way around causes an error

-- timing is faster than spring in animation